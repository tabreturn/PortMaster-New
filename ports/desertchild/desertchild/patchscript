#!/bin/bash

GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patchlog_error.txt"

# redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# patch failure function
patch_failure() {
  mv "$LOGFILE" "$LOGERR"
  $ESUDO umount "$DOTNETDIR"
  $ESUDO umount "$TOOLKIT"
  echo "Patching process failed."
  exit 1
}

# mount gmtoolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
  $ESUDO mkdir -p "$TOOLKIT"
  $ESUDO umount "$RUNTIME" || true
  $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
  echo "This port requires the GMToolkit runtime. Please download it."
  sleep 2
  patch_failure
fi

# mount dotnet runtime
DOTNETDIR="$HOME/mono"
DOTNETFILE="$controlfolder/libs/dotnet-8.0.12.squashfs"
if [ -f "$DOTNETFILE" ]; then
  $ESUDO mkdir -p "$DOTNETDIR"
  $ESUDO umount "$DOTNETFILE" || true
  $ESUDO mount "$DOTNETFILE" "$DOTNETDIR"
else
  echo "This port requires the Dotnet runtime. Please download it."
  sleep 2
  patch_failure
fi

# exports
export PATH="$DOTNETDIR:$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="desertchild.port"
export TMPDIR="$GAMEDIR/tmp"
export SAVEDIR="$GAMEDIR/saves"

# permissions
chmod 666 /dev/uinput
chmod 755 "$TOOLKIT/gmtools/gmKtool.py" "$TOOLKIT/gmtools/oggenc" "$TOOLKIT/gmtools/oggdec"

# set up trap for cleaning tmpdir on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
  echo "Missing Python!"
  patch_failure
fi
ZIP=$(which zip)
if [ -z "$ZIP" ]; then
  echo "Missing zip!"
  patch_failure
fi

prepare_files() {
  # delete excess files
  find "$DATADIR" -type f \( \
    -name "*.exe" -o -name "*.dll" -o -name "*.hashdb" -o -name "*.pdf" -o  \
    -name "*.ico" -o -name "*.lnk" -o -name "*.msg" -o -name "*.zip" \
  \) -exec rm -f {} \;
}

# externalize game textures with compression
dump_textures() {
  # purge cache before operations
  rm -rf "$TMPDIR/"*
  # begin texture operations
  dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
    dump "$DATADIR/data.win" \
    -e "$DATADIR/textures" "$DATADIR/game.droid"
  if [ $? -ne 0 ]; then
    echo "[DOTNET]: Texture dumping failed to apply."
    patch_failure
  else
    rm -f "$DATADIR/data.win"
    mv "$DATADIR/textures" "$SAVEDIR/textures"
    [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
  fi
}

# archive .port
zip_archive() {
  zip -r -0 "$DATAFILE" ./assets/
  echo "Zipped contents to $DATAFILE"
  rm -Rf ./assets/
}

process_game() { 
  echo "Preparing game ..."
  prepare_files || patch_failure 
  echo "Externalize game textures ..."
  dump_textures || patch_failure
  sleep 1
  echo "Finishing up ..."
  zip_archive || patch_failure
  sleep 1
  # unmount runtimes
  $ESUDO umount "$DOTNETDIR"
  $ESUDO umount "$TOOLKIT"
  # final completion message
  echo "Patching process complete!"
}

# Call the function
process_game
