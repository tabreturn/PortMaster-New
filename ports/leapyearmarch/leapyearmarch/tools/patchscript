#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patch_error.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Patch failure function
patch_failure() {
    mv "$LOGFILE" "$LOGERR"
    echo "Patching process failed."
    sleep 5
    exit 1
}

# Mount the GMToolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.${DEVICE_ARCH}.squashfs"
if [ -f "$RUNTIME" ]; then
    $ESUDO mkdir -p "$TOOLKIT"
    $ESUDO umount "$RUNTIME" || true
    $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
    echo "This port requires the GMToolkit runtime. Please download it."
    sleep 2
    patch_failure
fi

# Exports
export PATH="$TOOLKIT/gmtools:$TOOLKIT/utmt-cli:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export GAMEFILE="$(basename "$GAMEDIR")"
export DATAFILE="game.port"
export TMPDIR="$GAMEDIR/tmp"

# Permissions
chmod 666 /dev/uinput
chmod 755 "$TOOLKIT/gmtools/gmKtool.py" "$TOOLKIT/gmtools/oggenc" "$TOOLKIT/gmtools/oggdec"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Bail if the dotnet runtime is missing or wasn't mounted
if ! command -v dotnet >/dev/null 2>&1; then
    echo "Dotnet is required but not installed. Please install the runtime."
    patch_failure
fi

# Test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
    echo "Missing Python!"
    patch_failure
fi

ZIP=$(which zip)
if [ -z "$ZIP" ]; then
    echo "Missing zip!"
    patch_failure
fi

# Check if PortMaster has xdelta3
if [ ! -f "$controlfolder/xdelta3" ]; then
    echo "This port requires the latest PortMaster to run, please go to https://portmaster.games/ for more info." > /dev/tty0
    patch_failure
fi

cd "$GAMEDIR"

# Apply xdelta patch
apply_xdelta() {
    if [ -f "$DATADIR/data.win" ] || [ -f "$DATADIR/data_potato.win" ]; then

        # Determine input file
        if [ -f "$DATADIR/data_potato.win" ]; then
            INPUT_FILE="$DATADIR/data_potato.win"
        else
            INPUT_FILE="$DATADIR/data.win"
        fi

        # Verify checksum
        CHECKSUM=$(md5sum "$INPUT_FILE" | awk '{print $1}')
        if [[ "$CHECKSUM" == "cf53a441e02c7eb14987ea19285b1fd5" || "$CHECKSUM" == "1111111111111111111111111" ]]; then
            echo "Checksum valid."
        else
            echo "No valid data.win or data_potato.win found."
            patch_failure
        fi

        # Apply Steam to itch.io patch only if checksum matches Steam version
        # NOTE that this is a placeholder for *potentially* adding Steam later, hence the bogus checksum: 1111111111111111111111111
        if [ "$CHECKSUM" == "1111111111111111111111111" ]; then
            echo "Applying Steam to itch.io xdelta patch ..."
            output=$($ESUDO $controlfolder/xdelta3 -d -s "$INPUT_FILE" -f "./tools/patch/steam_patch.xdelta" "$INPUT_FILE" 2>&1)
            echo "$output"
        fi

        # Apply potato patch if data_potato.win exists
        if [ -f "$DATADIR/data_potato.win" ]; then
            echo "Applying potato itch.io xdelta patch"
            output=$($ESUDO $controlfolder/xdelta3 -d -s "$DATADIR/data_potato.win" -f "./tools/patch/itch_patch.xdelta" "$DATADIR/data2.win" 2>&1)
            echo "Patching..."
            if [ $? -eq 0 ]; then
                echo "Patch applied successfully"
                echo "$output"
                rm "$INPUT_FILE" && mv "$DATADIR/data2.win" "$DATADIR/data.win"
                sleep 1
            else
                echo "Failed to apply patch"
                echo "$output"
                patch_failure
            fi
        fi

    fi
}

# Externalize game textures with compression
dump_textures() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Begin texture operations
    dotnet "$TOOLKIT/utmt-cli/UndertaleModCli.dll" \
        dump "$DATADIR/data.win" \
        -e "$DATADIR/textures" "$DATADIR/game.droid"

    if [ $? -ne 0 ]; then
        echo "[DOTNET]: Texture dumping failed to apply."
        patch_failure
    else
        rm -f "$DATADIR/data.win"
        mkdir -p "$SAVEDIR/textures"
        mv "$DATADIR/textures" "$SAVEDIR"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
}

compress_audio() {  
    mkdir -p "$TMPDIR"

    if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -v -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
        mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed for $GAMEFILE."
        rmdir "$TMPDIR"
        patch_failure
    fi
}

zip_archive() {
    "$ZIP" -r -0 $DATAFILE ./assets/
    rm -rf ./assets
    mkdir -p saves
}

install_complete() {
    echo "Installation completed successfully!"
    echo "-----------------------------"
    echo "Process finished at: $(date)"
}

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
    echo "Removed unnecessary files"
    sleep 1
    apply_xdelta
    sleep 1
    echo "Externalizing textures..."
    dump_textures
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
    install_complete
}

process_game

