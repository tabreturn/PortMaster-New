#!/bin/bash

# set gamedir to the current directory and set log file
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="blungosdungeonluncheon.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$controlfolder:$GAMEDIR/tools:$PATH"

# permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"
chmod 777 "$TOOLDIR/oggdec"

cd "$GAMEDIR"

compress_audio() {
  echo "Compressing audio ..."
  # clear out the temporary directory
  mkdir -p "$TMPDIR"
  rm -rf $TMPDIR/*

  # run the compression tool
  echo "Running GMTools on data and audiogroups."
  $PYTHON $TOOLDIR/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"

  if [ $? -eq 0 ]; then
    echo "Compression completed successfully."
    mv "$TMPDIR/"* "$DATADIR"
    echo "Moved compressed files to $DATADIR."
    rm -rf "$TMPDIR"
    echo "Temporary directory $TMPDIR removed."
    echo "Audio compression applied successfully."
    sleep 1
  else
    echo "Audio compression failed."
    echo "Cleaning up temporary directory $TMPDIR."
    rm -rf "$TMPDIR"
    sleep 1
  fi
}

zip_archive() {
  echo "Zip assets to $DATAFILE."
  zip -r -0 $DATAFILE ./assets/
  echo "Delete assets folder."
  #rm -Rf "$DATADIR/assets" -------------------- TEMP COMMENT TO CHECK AUDIOGROUP FILE SIZES
}

install_complete() {
  # create install completion flag
  touch "install_completed"
  echo "Installation completed successfully!"
  echo "-----------------------------"
  echo "Process finished at: $(date)"
}

process_game() {
  echo "Rename data.win to game.droid ..."
  mv "$DATADIR/data.win" "$DATADIR/game.droid"
  echo "Compressing audio ..."
  compress_audio
  sleep 1
  echo "Finishing up ..."
  zip_archive
  sleep 1
  install_complete
}

# call the function
process_game
